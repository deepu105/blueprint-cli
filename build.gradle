import java.text.SimpleDateFormat

plugins {
    id 'com.github.blindpirate.gogradle' version '0.10'
    id 'pl.allegro.tech.build.axion-release' version '1.9.2'
}

apply plugin: 'maven-publish'

golang {
    goVersion = '1.11'
    packagePath = 'github.com/xebialabs/xl-cli' // go import path of project to be built, NOT local file system path!
}

dependencies {
    golang {
        build name: 'github.com/mattn/go-isatty', tag: 'v0.0.3'
        build name: 'github.com/mitchellh/go-homedir', tag: 'v1.0.0'
        build name: 'github.com/spf13/cobra', tag: 'v0.0.3'
        build name: 'github.com/spf13/viper', tag: 'v1.1.0'
        build name: 'github.com/stretchr/testify/', tag: 'v1.2.2'
        build name: 'github.com/stretchr/testify/assert', tag: 'v1.2.2'
        build name: 'github.com/jhoonb/archivex/archivex'
        build name: 'github.com/xebialabs/yaml', branch: 'v2'
        build name: 'golang.org/x/crypto/ssh/terminal'
        build name: 'gopkg.in/cheggaaa/pb.v1', tag: 'v1.0.25'
        build name: 'github.com/mholt/archiver', tag: 'v2.1.0'
    }
}

repositories {
    mavenCentral()
}

build {
    // Cross-compile platforms, update as necessary.
    targetPlatform = [
            'darwin-amd64', 'linux-amd64', 'windows-amd64'
    ]

    def gitCommit = runCmd('git', 'rev-parse', 'HEAD')
    def gitVersion = runCmd('git', 'describe', '--dirty', '--broken')
    def gitVersionShort = gitVersion.startsWith("xl-client-") ? gitVersion.substring(10) : gitVersion

    def simpleDateFormat = new SimpleDateFormat("yyy-MM-dd'T'HH:mm:ss.SSS'Z'")
    simpleDateFormat.setTimeZone(TimeZone.getTimeZone("UTC"))
    def date = simpleDateFormat.format(new Date())

    def ldflags = "-ldflags='" +
            ldflag("BuildVersion", gitVersionShort) +
            ldflag("BuildGitCommit", gitCommit) +
            ldflag("BuildDate", date) +
            "'"

    // The ${} placeholder will be rendered in cross-compile
    go "build ${ldflags} -o ./build/\${GOOS}-\${GOARCH}/xl\${GOEXE} cmd/xl/main.go"
}

build.dependsOn test

clean.doFirst {
    delete 'build'
}

scmVersion {
    tag {
        prefix = 'xl-client'
    }

    versionIncrementer {
        context ->
            def cv = context.currentVersion
            def releaseScope = System.getProperty('release.releaseScope')
            def releaseStage = System.getProperty('release.releaseStage')
            def releaseExplicit = System.getProperty('release.releaseExplicit')

            switch (releaseScope) {
                case 'major':
                    cv = cv.preReleaseVersion ? cv.incrementMajorVersion(cv.preReleaseVersion) : cv.incrementMajorVersion()
                    break
                case 'minor':
                    cv = cv.preReleaseVersion ? cv.incrementMinorVersion(cv.preReleaseVersion) : cv.incrementMinorVersion()
                    break
                case 'patch':
                    cv = cv.preReleaseVersion ? cv.incrementPatchVersion(cv.preReleaseVersion) : cv.incrementPatchVersion()
            }

            if (releaseStage && cv.preReleaseVersion?.contains(releaseStage)) {
                cv.incrementPreReleaseVersion()
            } else if (releaseStage) {
                releaseStage == 'final' ? cv.valueOf(cv.normalVersion) : cv.setPreReleaseVersion(releaseStage + '.1')
            } else {
                releaseExplicit ? cv.valueOf(releaseExplicit) : cv
            }
    }
}

project.version = scmVersion.version

task copyVendor(type: Copy) {
    from "vendor"
    into ".gogradle/project_gopath/src"
}

vendor.finalizedBy copyVendor

publishing {
    publications {
        maven(MavenPublication) {
            groupId 'com.xebialabs.xlclient'
            artifactId 'xl-client'
            artifact("./build/darwin-amd64/xl") {
                classifier = 'darwin-amd64'
                extension = 'bin'
            }
            artifact("./build/linux-amd64/xl") {
                classifier = 'linux-amd64'
                extension = 'bin'
            }
            artifact("./build/windows-amd64/xl.exe") {
                classifier = 'windows-amd64'
                extension = 'exe'
            }
        }
    }

    repositories {
        maven {
            def alphasRepoUrl = "${nexusBaseUrl}/repositories/alphas/"
            def releasesRepoUrl = "${nexusBaseUrl}/repositories/releases/"
            url version.contains('alpha') ? alphasRepoUrl : releasesRepoUrl
            credentials {
                username nexusUserName
                password nexusPassword
            }
        }
    }
}

def runCmd(Object... args) {
    def stdout = new ByteArrayOutputStream()
    exec {
        commandLine args
        standardOutput = stdout
    }
    return stdout.toString().trim()
}

def ldflag(c, v) {
    "-X \"github.com/xebialabs/xl-cli/cmd/xl/cmd.${c}=${v}\" "
}