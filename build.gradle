plugins {
    id 'com.github.blindpirate.gogradle' version '0.10'
    id 'pl.allegro.tech.build.axion-release' version '1.9.2'
}

apply plugin: 'maven-publish'

golang {
    packagePath = 'github.com/xebialabs/xl-cli' // go import path of project to be built, NOT local file system path!
}

dependencies {
    golang {
        build name: 'github.com/mitchellh/go-homedir'
        build name: 'github.com/spf13/cobra'
        build name: 'github.com/spf13/viper'
        build name: 'github.com/stretchr/testify/'
        build name: 'github.com/stretchr/testify/assert'
        build name: 'github.com/xebialabs/yaml', branch: 'v2'
    }
}

repositories {
    mavenCentral()
}

build {
    // Cross-compile platforms, update as necessary.
    targetPlatform = [
            'darwin-amd64', 'linux-amd64', 'windows-amd64'
    ]

    // The ${} placeholder will be rendered in cross-compile
    go 'build -o ./build/${GOOS}-${GOARCH}/xl${GOEXE} cmd/xl/main.go'
}

build.dependsOn test

clean.doFirst {
    delete 'build'
}

scmVersion {
    tag {
        prefix = 'xl-client'
    }

    versionIncrementer {
        context ->
            def cv = context.currentVersion
            def phase = System.getProperty('release.prereleasePhase')
            phase ? cv.setPreReleaseVersion(phase + '.1') : cv.incrementPreReleaseVersion()
    }
}

project.version = scmVersion.version

publishing {
    publications {
        maven(MavenPublication) {
            groupId 'com.xebialabs.xlclient'
            artifactId 'xl-client'
            artifact("./build/darwin-amd64/xl") {
                classifier = 'darwin-amd64'
                extension = 'bin'
            }
            artifact("./build/linux-amd64/xl") {
                classifier = 'linux-amd64'
                extension = 'bin'
            }
            artifact("./build/windows-amd64/xl.exe") {
                classifier = 'windows-amd64'
                extension = 'exe'
            }
        }
    }
    repositories {
        maven {
            def alphasRepoUrl = "${nexusBaseUrl}/repositories/alphas/"
            def releasesRepoUrl = "${nexusBaseUrl}/repositories/releases/"
            url version.contains('alpha') ? alphasRepoUrl : releasesRepoUrl
            credentials {
                username nexusUserName
                password nexusPassword
            }
        }
    }
}
