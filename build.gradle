import com.github.blindpirate.gogradle.Go

import java.text.SimpleDateFormat
import jp.classmethod.aws.gradle.s3.AmazonS3FileUploadTask

plugins {
    id 'com.github.blindpirate.gogradle' version '0.10.2'
    id 'pl.allegro.tech.build.axion-release' version '1.9.2'
    id "jp.classmethod.aws" version "0.38"
}

apply plugin: 'maven-publish'
apply plugin: 'jp.classmethod.aws.s3'

golang {
    goVersion = '1.11'
    packagePath = 'github.com/xebialabs/xl-cli' // go import path of project to be built, NOT local file system path!
}

dependencies {
    golang {

        // *** WARNING *** since we now have license information embedded in the application
        // You need to do some additional steps when adding a library. See README for more details
        // *** NOTICE **** always verify the information from the tool since its based on heuristics
        build name: 'github.com/gobuffalo/packr'
        build name: 'github.com/spf13/cobra',               tag: 'v0.0.3'
        build name: 'github.com/spf13/viper',               tag: 'v1.1.0'
        build name: 'github.com/mitchellh/go-homedir',      tag: 'v1.0.0'
        build name: 'github.com/xebialabs/yaml',            branch: 'v2'
        build name: 'github.com/jhoonb/archivex/archivex'
        build name: 'github.com/mholt/archiver',            tag: 'v2.1.0'
        build name: 'github.com/olekukonko/tablewriter',    tag: 'v0.0.1'
        build name: 'gopkg.in/cheggaaa/pb.v1',              tag: 'v1.0.25'
        build name: 'github.com/mattn/go-isatty',           tag: 'v0.0.3'
        build name: 'github.com/Masterminds/sprig',         tag: 'v2.16.0'
        build name: 'gopkg.in/AlecAivazis/survey.v1',       tag: 'v1.6.2'
        build name: 'github.com/aws/aws-sdk-go',            tag: 'v1.15.45'
        build name: 'github.com/huandu/xstrings',           tag: 'v1.2.0'
        build name: 'github.com/deckarep/golang-set',       tag: 'v1.7.1'
        build name: 'github.com/magiconair/properties',     tag: 'v1.8.0'
        build name: 'github.com/thoas/go-funk',             tag: '0.4'
        test name: 'github.com/stretchr/testify/',          tag: 'v1.2.2'
        test name: 'github.com/stretchr/testify/assert',    tag: 'v1.2.2'
        test name: 'golang.org/x/crypto/ssh/terminal'
    }
}

repositories {
    mavenCentral()
}


scmVersion {
    tag {
        prefix = 'xl-client'
    }

    versionIncrementer {
        context ->
            def cv = context.currentVersion
            def releaseScope = System.getProperty('release.releaseScope')
            def releaseStage = System.getProperty('release.releaseStage')
            def releaseExplicit = System.getProperty('release.releaseExplicit')

            switch (releaseScope) {
                case 'major':
                    cv = cv.preReleaseVersion ? cv.incrementMajorVersion(cv.preReleaseVersion) : cv.incrementMajorVersion()
                    break
                case 'minor':
                    cv = cv.preReleaseVersion ? cv.incrementMinorVersion(cv.preReleaseVersion) : cv.incrementMinorVersion()
                    break
                case 'patch':
                    cv = cv.preReleaseVersion ? cv.incrementPatchVersion(cv.preReleaseVersion) : cv.incrementPatchVersion()
            }

            if (releaseStage && cv.preReleaseVersion?.contains(releaseStage)) {
                cv.incrementPreReleaseVersion()
            } else if (releaseStage) {
                releaseStage == 'final' ? cv.valueOf(cv.normalVersion) : cv.setPreReleaseVersion(releaseStage + '.1')
            } else {
                releaseExplicit ? cv.valueOf(releaseExplicit) : cv
            }
    }
}

project.version = scmVersion.version

task installTemplify(type: Go) {
    go "get github.com/wlbr/templify"
}

task installPackr(type: Go) {
    go "get github.com/gobuffalo/packr/packr"
    go "install github.com/gobuffalo/packr/packr"
}

installDependencies.dependsOn installTemplify, installPackr

task dumpVersion {
    file(buildDir).mkdirs()
    def out = file("$buildDir/version.dump")
    out.write("version=$project.version")
}

build {
    // Cross-compile platforms, update as necessary.
    targetPlatform = [
            'darwin-amd64', 'linux-amd64', 'windows-amd64'
    ]

    environment "CGO_ENABLED", "0" // To make sure a fully statically linked binary is produced even when building on linux

    def gitCommit = runCmd('git', 'rev-parse', 'HEAD')
    def gitVersion = runCmd('git', 'describe', '--long', '--dirty')
    def gitVersionShort = gitVersion.startsWith("xl-client-") ? gitVersion.substring(10) : gitVersion

    def simpleDateFormat = new SimpleDateFormat("yyy-MM-dd'T'HH:mm:ss.SSS'Z'")
    simpleDateFormat.setTimeZone(TimeZone.getTimeZone("UTC"))
    def date = simpleDateFormat.format(new Date())

    def ldflags = "-ldflags='" +
            ldflag("CliVersion", { -> project.version}) +
            ldflag("BuildVersion", gitVersionShort) +
            ldflag("BuildGitCommit", gitCommit) +
            ldflag("BuildDate", date) +
            (project.hasProperty("optimise") ? "-s -w" : "") +
            "'"

    run "packr"
    go "generate cmd/xl/cmd/wrapper.go"
    // The ${} placeholder will be rendered in cross-compile
    go "build ${ldflags} -o ./build/\${GOOS}-\${GOARCH}/xl\${GOEXE} cmd/xl/main.go"
    dumpVersion
}

aws {
    profileName = "default"
}

build.dependsOn test

clean.doFirst {
    delete 'build'
}


task copyVendor(type: Copy) {
    from "vendor"
    into ".gogradle/project_gopath/src"
}

task upx {
    dependsOn build
    doLast {
        exec {
            commandLine 'upx', "${project.buildDir}/darwin-amd64/xl"
        }
        exec {
            commandLine 'upx', "${project.buildDir}/linux-amd64/xl"
        }
        exec {
            commandLine 'upx', "${project.buildDir}/windows-amd64/xl.exe"
        }
    }
}

vendor.finalizedBy copyVendor

publishing {
    publications {
        maven(MavenPublication) {
            groupId 'com.xebialabs.xlclient'
            artifactId 'xl-client'
            artifact("./build/darwin-amd64/xl") {
                classifier = 'darwin-amd64'
                extension = 'bin'
            }
            artifact("./build/linux-amd64/xl") {
                classifier = 'linux-amd64'
                extension = 'bin'
            }
            artifact("./build/windows-amd64/xl.exe") {
                classifier = 'windows-amd64'
                extension = 'exe'
            }
        }
    }

    repositories {
        maven {
            def alphasRepoUrl = "${nexusBaseUrl}/repositories/alphas/"
            def releasesRepoUrl = "${nexusBaseUrl}/repositories/releases/"
            url version.contains('alpha') ? alphasRepoUrl : releasesRepoUrl
            credentials {
                username nexusUserName
                password nexusPassword
            }
        }
    }
}

task uploadToS3 {
    mustRunAfter 'publish'
    dependsOn 'uploadDarwinToS3', 'uploadWindowsToS3', 'uploadLinuxToS3'
}

task uploadDarwinToS3(type: AmazonS3FileUploadTask) {
    file file("${project.buildDir}/darwin-amd64/xl")
    bucketName 'xl-cli'
    key "bin/${project.version}/darwin-amd64/xl"
}

task uploadWindowsToS3(type: AmazonS3FileUploadTask) {
    file file("${project.buildDir}/windows-amd64/xl.exe")
    bucketName 'xl-cli'
    key "bin/${project.version}/windows-amd64/xl.exe"
}

task uploadLinuxToS3(type: AmazonS3FileUploadTask) {
    file file("${project.buildDir}/linux-amd64/xl")
    bucketName 'xl-cli'
    key "bin/${project.version}/linux-amd64/xl"
}

def runCmd(Object... args) {
    def stdout = new ByteArrayOutputStream()
    exec {
        commandLine args
        standardOutput = stdout
    }
    return stdout.toString().trim()
}

def ldflag(c, v) {
    "-X \"github.com/xebialabs/xl-cli/cmd/xl/cmd.${c}=${v}\" "
}
